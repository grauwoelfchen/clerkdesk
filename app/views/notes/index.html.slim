- if params[:t]
  - breadcrumb :notes_with_tag, params[:t]
- else
  - breadcrumb :notes

- content_for :header
  h2= Note.model_name.human
  h3= t('subheading.note')

- content_for :actions
  .item
    = Note.model_name.human
    .menu
      = link_to t('action.new'), new_note_path, class: 'item'
      = link_to t('action.index'), notes_path, class: 'item active'

.note
  section
    .ui.grid
      .eleven.wide.column
        .sort
          ul.links
            li
              span.attribute
                = Note.human_attribute_name(:title)
              = sort_links_for(:title)
            li
              span.attribute
                = Note.human_attribute_name(:updated_at)
              = sort_links_for(:updated_at, :desc)
          .filter
            - if params[:t]
              - capture_to_local tag=:tag
                span.tag= params[:t]
              = t('result.filter_by.tag', tag: tag).html_safe
        .container
          = render 'shared/pagination', resource: @notes
          hr
          .ui.embedded.segment
            .ui.items
              - @notes.each do |note|
                .item
                  .image
                    = link_to note_path(note) do
                      i.fa.fa-file-o.fa-6
                  .content
                    = link_to truncate(note.title, length: 22), note_path(note), class: 'header'
                    .meta
                      .tags
                        - note.tags.take(3).each do |tag|
                          span.tag
                            = link_to truncate(tag.name, length: 8), url_for(params.merge(tag: tag.name))
                        - if note.tags.length > 3
                          span.more
                            = link_to '... more', note_path(note)
                    .meta
                      span.updated_at= note.updated_at
                    .description
                      = truncate(strip_tags(note.content_html), length: 30)
                    .extra
          = render 'shared/pagination', resource: @notes
