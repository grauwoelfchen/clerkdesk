//= require jquery-autosize/jquery.autosize.min.js
//= require jquery-ui/jquery-ui.min.js
//= require jquery-ui/ui/minified/autocomplete.min.js
//= require jquery-tag-editor/jquery.caret.min.js
//= require jquery-tag-editor/jquery.tag-editor.min.js

(function($) {
  'use strict';

  $(function() {
    // indicator
    (function() {
      var container = $('#entry_journalizing_id');
      container.parent().append(
        '<span id="indicator">' +
          '<img src="<%= asset_path('loading.gif') %>">' +
        '</div>'
      );
      var Indicator = require('../../modules/indicator');
      Indicator.setup($, container);
    })();

    // journalizings updater
    (function() {
      var type         = $('#entry_type')
        , journalizing = $('#entry_journalizing_id')
        ;

      var setJournalizingOptions = function(typeVal, journalizingVal) {
        var ledger  = $('#ledger')
          , account = $('#account')
          ;
        if (typeof journalizingVal === "undefined") {
          journalizingVal = null;
        }
        $.ajax({
          async:    true
        , type:     'GET'
        , dataType: 'json'
        , accepts:  'application/json'
        , url:      '/finances/' + ledger.attr('data-id') +
            '/accounts/' + account.attr('data-id') +
            '/journalizings.json?type=' + encodeURIComponent(typeVal)
        })
        .fail(function() {
          journalizing.empty();
          journalizing.html('<option value="">---</option>');
          type.val('');
          // dropdown
          journalizing.dropdown('clear');
          journalizing.dropdown('set text', '---');
          alert("Sorry, please retry :'(");
        })
        .done(function(data) {
          journalizing.empty();
          data.unshift({name: '---', id: ''});
          $(data).each(function(key, value) {
            var id   = $('<div/>').text(value.id).html()
              , name = $('<div/>').text(value.name).html()
              ;
            if (id == journalizingVal) {
              journalizing.append(
                '<option value="' + id + '" selected="selected">' + name + '</option>'
              );
              journalizing.dropdown('set selected', journalizingVal);
              journalizing.dropdown('set text', name);
            } else {
              journalizing.append(
                '<option value="' + id + '">' + name + '</option>'
              );
            }
          });
          // dropdown
          if (journalizingVal == null || journalizingVal == '') {
            journalizing.dropdown('clear');
            journalizing.dropdown('set text', '---');
          }
          return true;
        });
      };

      var typeVal         = type.val()
        , journalizingVal = journalizing.val()
        ;

      // initialize
      if (typeVal) {
        setJournalizingOptions(typeVal, journalizingVal);
      }

      type.change(function() {
        var typeVal = $(this).val(); // refetch
        if (typeVal == '') {
          journalizing.empty();
          journalizing.html('<option value="">---</option>');
          return true;
        }
        return setJournalizingOptions(typeVal);
      });
    })();

    // autosize
    (function() {
      if ($.fn.autosize == undefined) { return; }

      var textarea = $('#entry_memo');
      textarea.autosize();
    })();

    // currency input
    (function() {
      if ($.fn.autoNumeric == undefined) { return; }

      $('#entry_type').change(function() {
        var field = $('#entry_total_amount.currency')
          , currentValue = field.autoNumeric('get');
        if ($(this).val() === 'income') {
          field.autoNumeric('update', {
            vMin: '0'
          , vMax: '100000000'
          });
          var value = (currentValue < 0) ? currentValue * -1 : currentValue;
          field.autoNumeric('set', value);
        } else {
          field.autoNumeric('update', {
            vMin: '-100000000'
          , vMax: '0'
          });
          var value = (currentValue > 0) ? currentValue * -1 : currentValue;
          field.autoNumeric('set', value);
        }
      });
    })();

    // tag editor
    (function() {
      if ($.fn.tagEditor == undefined) { return; }

      var tagList = $('#labels');

      $.ajax({
        async:    true
      , type:     'GET'
      , dataType: 'json'
      , accepts:  'application/json'
      , url:      '/people/search.json'
      })
      .done(function(data) {
        var labels = $.map(data.people, function(p, i) { return p.label; });
        var dict   = {};
        $.each(data.people, function(i, p) { dict[p.label] = p.id; });
        tagList.tagEditor({
          delimiter:      ','
        , forceLowercase: false
        , placeholder:    'Person'
        , autocomplete: {
            delay:     0
          , position:  { collision: 'flip' }
          , source:    labels || []
          , minLength: 1
          }
          , onChange: function(field, editor, tags) {
              var source = this.autocomplete.source;
              $('.tag-editor-tag:not(.active)', editor).each(function(i) {
                var tag = $(this).html();
                if ($.inArray(tag, source) == -1) {
                  // remove unknown
                  $(this).closest('li').remove();
                  var holder  = $('#people div.holder:eq(' + i + ')')
                    , destroy = holder.children('input.destroy');
                  if (destroy.length == 0) {
                    holder.remove();
                  } else { // persisted
                    destroy.prop('value', '1');
                  }
                }
              });
            }
          , beforeTagSave: function(field, editor, tags, tag, val) {
              var source = this.autocomplete.source
                , id    = dict[val]
                ;
              if (id) {
                var hidden = $('#holder_' + id);
                if (hidden.length == 0 && $.inArray(val, source) > -1) {
                  $('#people').append(
                    '<div class="holder">' +
                    '<input' +
                    ' type="hidden"' +
                    ' id="holder_' + id + '"' +
                    ' name="entry[involvements_attributes][][holder_id]"' +
                    ' value="' + id + '"' +
                    '/>' +
                    '<input' +
                    ' type="hidden"' +
                    ' id="holder_' + id + '_type"' +
                    ' name="entry[involvements_attributes][][holder_type]"' +
                    ' value="Person"' +
                    '/>' +
                    '</div>'
                  );
                }
              }
            }
          , beforeTagDelete: function(field, editor, tags, val) {
              var source = this.autocomplete.source
                , id     = dict[val]
                ;
              if (id) {
                var destroy = $('#holder_' + id + '_destroy');
                if (destroy.length == 0) {
                  $('#holder_' + id).remove();
                  $('#holder_' + id + '_type').remove();
                } else { // persisted
                  destroy.prop('value', '1');
                }
              }
            }
        });
      });
    })();
  });
})(jQuery);
